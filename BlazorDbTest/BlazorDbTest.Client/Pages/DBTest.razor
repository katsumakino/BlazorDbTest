@page "/dbtest"
@* HttpClient を受け取る *@
@inject HttpClient HttpClient

<PageTitle>DB Test</PageTitle>

<h1>Hi!</h1>

<h3>INPUT</h3>
<EditForm EditContext="editContextPatientInfo" FormName="patientinfoform"/>

<br />
<h4>○ 患者ID</h4>
<div class="part-group">
    <label>ID:</label>
    <InputText @bind-Value="PatientInfoModel.ID" autocomplete=off />
</div>

<br />
<h4>○ 患者情報</h4>
<div class="part-group">
    <label>Family Name:</label>
    <InputText @bind-Value="PatientInfoModel.FamilyName" autocomplete=off />
</div>
<div class="part-group">
    <label>First Name:</label>
    <InputText @bind-Value="PatientInfoModel.FirstName" autocomplete=off />
</div>
<div>
    <label>Gender:</label>
    <InputRadioGroup @bind-Value="PatientInfoModel.Gender">
        <InputRadio Value="Gender.male" />Man
        <InputRadio Value="Gender.female" />Female
        <InputRadio Value="Gender.other" />NoSpecified
    </InputRadioGroup>
</div>
<div>
    <label>Birthday:</label>
    <InputDate @bind-Value="PatientInfoModel.BirthDate" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div class="part-group">
    <label>Mark:</label>
    <InputCheckbox @bind-Value="PatientInfoModel.Mark" />
</div>
<div class="part-group">
    <label>Same ID:</label>
    <InputText @bind-Value="PatientInfoModel.SameID" autocomplete=off />
</div>
<div>
    <button @onclick="PatientInfoButtonClick">Register</button>
</div>
<br />
<div>
    <button @onclick="UpdatePatientListButtonClick">Update</button>
</div>
@if (patientList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Gender</th>
                <th>Age</th>
                <th>BirthDay</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var patientinfo in patientList) {
                <tr>
                    <td>@patientinfo.ID</td>
                    <td>@patientinfo.FamilyName</td>
                    <td>@patientinfo.FirstName</td>
                    <td>@patientinfo.Gender</td>
                    <td>@patientinfo.Age</td>
                    <td>@patientinfo.BirthDate</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<EditForm EditContext="editContextAxial" FormName="axialform" />
<h4>○ 眼軸長測定値</h4>
<div class="part-group">
    <label>Axial(R):</label>
    <input type="number" @bind-value=AxialModel.RAxial />
</div>
<div class="part-group">
    <label>Axial(L):</label>
    <input type="number" @bind-value=AxialModel.LAxial />
</div>
<div>
    <label>Exam Date:</label>
    <InputDate @bind-Value="AxialModel.ExamDateTime" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div>
    <button @onclick="AxialButtonClick">Register</button>
</div>
<br />
<div>
    <button @onclick="UpdateAxialListButtonClick">Update</button>
</div>
@if (axialList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>R</th>
                <th>L</th>
                <th>Exam Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var axial in axialList) {
                <tr>
                    <td>@axial.PatientID</td>
                    <td>@axial.RAxial</td>
                    <td>@axial.LAxial</td>
                    <td>@axial.ExamDateTime</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<h4>○ 治療名称</h4>
<div class="part-group">
    <label>Treat ID:</label>
    <input type="number" @bind-value=TreatmentMethodModel.ID />
</div>
<div class="part-group">
    <label>Treat Name:</label>
    <InputText @bind-Value="TreatmentMethodModel.TreatName" autocomplete=off />
</div>
<br />

<h4>○ 治療方法登録</h4>
<div class="part-group">
    <label>RED:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.R />
</div>
<div class="part-group">
    <label>Green:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.G />
</div>
<div class="part-group">
    <label>Blue:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.B />
</div>
<div class="part-group">
    <label>Alpha:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.A />
</div>
<div class="part-group">
    <label>Suppression Rate:</label>
    <input type="number" @bind-value=TreatmentMethodModel.SuppresionRate />
</div>
<div>
    <button @onclick="TreatmentMethodButtonClick">Register</button>
</div>

<br />
<div>
    <button @onclick="UpdateTreatmentMethodListButtonClick">Update</button>
</div>
@if (treatmentMethodList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Treatment ID</th>
                <th>Treatment Name</th>
                <th>Red</th>
                <th>Green</th>
                <th>Blue</th>
                <th>Alpha</th>
                <th>Suppression Rate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var treatMethod in treatmentMethodList) {
                <tr>
                    <td>@treatMethod.ID</td>
                    <td>@treatMethod.TreatName</td>
                    <td>@treatMethod.RGBAColor.R</td>
                    <td>@treatMethod.RGBAColor.G</td>
                    <td>@treatMethod.RGBAColor.B</td>
                    <td>@treatMethod.RGBAColor.A</td>
                    <td>@treatMethod.SuppresionRate</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<h4>○ 患者の治療状況登録</h4>
<div>
    <label>Start Date:</label>
    <InputDate @bind-Value="TreatmentModel.StartDateTime" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div>
    <label>End Date:</label>
    <InputDate @bind-Value="TreatmentModel.EndDateTime" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div>
    <button @onclick="TreatmentButtonClick">Register</button>
</div>

<br />
<div>
    <button @onclick="UpdateTreatmentListButtonClick">Update</button>
</div>
@if (treatmentList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Treatment ID</th>
                <th>Treatment Type ID</th>
                <th>Start</th>
                <th>End</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var treatment in treatmentList) {
                <tr>
                    <td>@treatment.ID</td>
                    <td>@treatment.TreatID</td>
                    <td>@treatment.StartDateTime</td>
                    <td>@treatment.EndDateTime</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private PatientInfo[]? patientList;
    private AxialList[]? axialList;
    private TreatmentData[]? treatmentList;
    private TreatmentMethodSetting[]? treatmentMethodList;
    private string MinDate = new DateTime(1990, 1, 1).ToString("yyyy-MM-dd");
    private string? messagetext;

    [SupplyParameterFromForm]
    private PatientInfo PatientInfoModel { get; set; } = default!;
    private AxialList AxialModel { get; set; } = default!;
    private TreatmentData TreatmentModel { get; set; } = default!;
    private TreatmentMethodSetting TreatmentMethodModel { get; set; } = default!;
    private EditContext editContextPatientInfo { get; set; } = default!;
    private EditContext editContextAxial { get; set; } = default!;
    private EditContext editContextTreatmentMethod { get; set; } = default!;
    private EditContext editContextTreatment { get; set; } = default!;
    private ValidationMessageStore ValidationMessageStore { get; set; } = default!;

    protected override async Task OnInitializedAsync() {
        PatientInfoModel ??= new();
        PatientInfoModel.Gender = Gender.other;
        PatientInfoModel.BirthDate = DateTime.Today;
        editContextPatientInfo = new(PatientInfoModel);

        AxialModel ??= new();
        AxialModel.ExamDateTime = DateTime.Now;
        editContextAxial = new(AxialModel);

        TreatmentMethodModel ??= new();
        TreatmentMethodModel.RGBAColor = new();
        editContextTreatmentMethod = new(TreatmentMethodModel);

        TreatmentModel ??= new();
        TreatmentModel.StartDateTime = DateTime.Now;
        TreatmentModel.EndDateTime = DateTime.Now;
        editContextTreatment = new(TreatmentModel);

        // API を呼び出してデータを取得
        patientList = await HttpClient.GetFromJsonAsync<PatientInfo[]>("api/DBPatientInfo/GetPatientInfoList");
    }

    void PatientInfoButtonClick() {
        // 患者情報をDBに書込み
        Task.Run(() => SetPatientInfoAsync());
    }

    void AxialButtonClick() {
        // 眼軸長測定値をDBに書込み
        Task.Run(() => SetAxialDataAsync());
    }

    void TreatmentMethodButtonClick() {
        // 治療方法データをDBに書込み
        Task.Run(() => SetTreatmentMethodAsync());
    }

    void TreatmentButtonClick() {
        // 治療状況データをDBに書込み
        Task.Run(() => SetTreatmentDataAsync());
    }

    void UpdatePatientListButtonClick() {
        // 患者情報リスト更新
        Task.Run(() => GetPatientListAsync());
    }

    void UpdateAxialListButtonClick() {
        // 眼軸長測定値リスト更新
        Task.Run(() => GetAxialListAsync());
    }

    void UpdateTreatmentMethodListButtonClick() {
        // 治療方法リスト更新
        Task.Run(() => GetTreatmentMethodListAsync());
    }

    void UpdateTreatmentListButtonClick() {
        // 治療状況リスト更新
        Task.Run(() => GetTreatmentDataListAsync());
    }

    /// <summary>
    /// DBへ患者情報を書込み
    /// </summary>
    /// <returns></returns>
    protected async Task SetPatientInfoAsync() {
        string content = $"api/DBPatientInfo/SetPatientInfo/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.ID));
        content += "/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.FamilyName));
        content += "/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.FirstName));
        content += "/";
        content += PatientInfoModel.Gender;
        content += "/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.BirthDate?.ToString()));

        await HttpClient.GetAsync(content);

        patientList = await HttpClient.GetFromJsonAsync<PatientInfo[]>("api/DBPatientInfo/GetPatientInfoList");

        //画面を更新する
        StateHasChanged();
    }

    /// <summary>
    /// DBから患者情報を取得
    /// </summary>
    /// <returns></returns>
    protected async Task GetPatientListAsync() {
        patientList = await HttpClient.GetFromJsonAsync<PatientInfo[]>("api/DBPatientInfo/GetPatientInfoList");

        //画面を更新する
        StateHasChanged();
    }

    ////////////////////////////////////////////////////////////////////
    // todo: 患者リストを取得
    // ID,名前,性別,年齢: PATIENT_LIST
    // 最新測定日,最新眼軸長: EXAM_OPTAXIAL
    // - ソートして先頭に来るデータを取得(右左ごと)
    // - 右左の測定日が同じなら両方表示
    // フラグ,治療方法,コメント: AXM_TABLE
    ////////////////////////////////////////////////////////////////////
    protected async Task GetPatientDataListAsync() {
        // todo:

        //画面を更新する
        StateHasChanged();
    }

    /// <summary>
    /// DBへ眼軸長測定値を書込み
    /// </summary>
    /// <returns></returns>
    protected async Task SetAxialDataAsync() {
        string content = $"api/DBAxialData/SetOptAxial/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.ID));
        content += "/";
        content += AxialModel.RAxial;
        content += "/";
        content += AxialModel.LAxial;
        content += "/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(AxialModel.ExamDateTime.ToString()));

        await HttpClient.GetAsync(content);
    }

    /// <summary>
    /// DBから眼軸長測定値を取得
    /// </summary>
    /// <returns></returns>
    protected async Task GetAxialListAsync() {
        string content = $"api/DBAxialData/GetOptAxialList/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.ID));

        AxialData[] ?axialDataList = await HttpClient.GetFromJsonAsync<AxialData[]>(content);

        if (axialDataList != null) {
            SetAxialList(axialDataList);
        } else {
            axialList = new AxialList[0];
        }

        //画面を更新する
        StateHasChanged();
    }

    /// <summary>
    /// DBから取得したデータを下記ルールに則りリストへセット
    /// ・1測定日1データ(右左)とする
    /// ・同じ測定日のデータがある場合、装置種別AxMのデータを優先する
    /// ・同じ測定日のデータは、測定時間が新しいものを採用する
    /// ・装置種別AxMのデータは、1測定日に1つしか登録できない
    /// </summary>
    /// <param name="axialDataList"></param>
    public void SetAxialList(AxialData[] axialDataList) {
        List<AxialList> list = new List<AxialList>();
        if (axialDataList != null) {
            try {
                for (int i = 0; i < axialDataList.Length; i++) {
                    bool isExist = false;
                    for(int j = 0; j < list.Count; j++) {
                        if (_DateTimeToDate(list[j].ExamDateTime) == _DateTimeToDate(axialDataList[i].ExamDateTime)) {

                            if (axialDataList[i].EyeId == EyeType.right) {
                                // 装置種別AxMのデータを優先する
                                // 装置種別AxMのデータは、1測定日に1つしか登録できない
                                if (!list[j].IsRManualInput) {
                                    if (list[j].RAxial == 0.0) {
                                        // 右眼かつ同じ測定日の右眼が0のとき
                                        list[j].RExamID = axialDataList[i].ID;
                                        list[j].RAxial = axialDataList[i].Axial;
                                        list[j].IsRManualInput = (axialDataList[i].DeviceID == 2);  // todo:
                                        isExist = true;
                                        break;
                                    } else if (list[j].ExamDateTime < axialDataList[i].ExamDateTime) {
                                        // 右眼かつ同じ測定時間が新しい
                                        list[j].RExamID = axialDataList[i].ID;
                                        list[j].RAxial = axialDataList[i].Axial;
                                        list[j].IsRManualInput = (axialDataList[i].DeviceID == 2);  // todo:
                                        list[j].ExamDateTime = axialDataList[i].ExamDateTime;
                                        isExist = true;
                                        break;
                                    }
                                }
                            } else if (axialDataList[i].EyeId == EyeType.left) {
                                if (!list[j].IsLManualInput) {
                                    if (list[j].LAxial == 0.0) {
                                        // 左眼かつ同じ測定日の左眼が0のとき
                                        list[j].LExamID = axialDataList[i].ID;
                                        list[j].LAxial = axialDataList[i].Axial;
                                        list[j].IsLManualInput = (axialDataList[i].DeviceID == 2);  // todo:
                                        isExist = true;
                                        break;
                                    } else if (list[j].ExamDateTime < axialDataList[i].ExamDateTime) {
                                        // 左眼かつ同じ測定時間が新しい
                                        list[j].LExamID = axialDataList[i].ID;
                                        list[j].LAxial = axialDataList[i].Axial;
                                        list[j].IsLManualInput = (axialDataList[i].DeviceID == 2);  // todo:
                                        list[j].ExamDateTime = axialDataList[i].ExamDateTime;
                                        isExist = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    // 同じ測定日のデータがないとき追加
                    if (!isExist) {
                        AxialList var = new AxialList() {
                                PatientID = PatientInfoModel.ID,
                                RExamID = string.Empty,
                                LExamID = string.Empty,
                                RAxial = 0.0,
                                LAxial = 0.0,
                                ExamDateTime = axialDataList[i].ExamDateTime,
                                IsRManualInput = false,
                                IsLManualInput = false,
                            };
                        if (axialDataList[i].EyeId == EyeType.right) {
                            var.RExamID = axialDataList[i].ID;
                            var.RAxial = axialDataList[i].Axial;
                            var.IsRManualInput = (axialDataList[i].DeviceID == 2);  // todo:
                        } else if (axialDataList[i].EyeId == EyeType.left) {
                            var.LExamID = axialDataList[i].ID;
                            var.LAxial = axialDataList[i].Axial;
                            var.IsLManualInput = (axialDataList[i].DeviceID == 2);  // todo:
                        }
                        list.Add(var);
                    }
                }
            } catch {
            }

            axialList = list.ToArray();
        }
    }

    /// <summary>
    /// DBへ治療方法を書込み
    /// </summary>
    /// <returns></returns>
    protected async Task SetTreatmentMethodAsync() {
        string content = $"api/DBTreatment/SetTreatmentMethod/";
        content += TreatmentMethodModel.ID;
        content += "/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(TreatmentMethodModel.TreatName));
        content += "/";
        content += TreatmentMethodModel.RGBAColor.R;
        content += "/";
        content += TreatmentMethodModel.RGBAColor.G;
        content += "/";
        content += TreatmentMethodModel.RGBAColor.B;
        content += "/";
        content += TreatmentMethodModel.RGBAColor.A;
        content += "/";
        content += TreatmentMethodModel.SuppresionRate;

        await HttpClient.GetAsync(content);
    }

    /// <summary>
    /// DBから治療方法を取得
    /// </summary>
    /// <returns></returns>
    protected async Task GetTreatmentMethodListAsync() {
        string content = $"api/DBTreatment/GetTreatmentMethodList";
        treatmentMethodList = await HttpClient.GetFromJsonAsync<TreatmentMethodSetting[]>(content);

        //画面を更新する
        StateHasChanged();
    }

    /// <summary>
    /// DBへ治療方法を書込み
    /// </summary>
    /// <returns></returns>
    protected async Task SetTreatmentDataAsync() {
        string content = $"api/DBTreatment/SetTreatment/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.ID));
        content += "/";
        content += TreatmentMethodModel.ID;
        content += "/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(TreatmentModel.StartDateTime.ToString()));
        content += "/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(TreatmentModel.EndDateTime.ToString()));

        await HttpClient.GetAsync(content);
    }

    /// <summary>
    /// DBから治療方法を取得
    /// </summary>
    /// <returns></returns>
    protected async Task GetTreatmentDataListAsync() {
        string content = $"api/DBTreatment/GetTreatmentList/";
        content += Convert.ToBase64String(Encoding.UTF8.GetBytes(PatientInfoModel.ID));

        treatmentList = await HttpClient.GetFromJsonAsync<TreatmentData[]>(content);

        //画面を更新する
        StateHasChanged();
    }

    // 測定日時の日付部分のみ取得
    private DateTime _DateTimeToDate(DateTime? input) {
        if (input == null) {
            return DateTime.MinValue;
        }
        return (DateTime)input.Value.Date;
    }

    //患者情報
    public class PatientInfo {
        public bool Mark { get; set; }                      //お気に入り(仮)
        public string ID { get; set; } = default!;
        public string FamilyName { get; set; } = default!;  //患者姓
        public string FirstName { get; set; } = default!;   //患者名
        public Gender Gender { get; set; }                  //性別
        public int Age { get; set; }                        //年齢
        public DateTime? BirthDate { get; set; }            //生年月日
        public string SameID { get; set; } = default!;      //同一ID
    }

    //性別
    public enum Gender {
        none,
        male,
        female,
        other, //未指定
    }

    //検索結果
    class PatientSerch {
        public PatientInfo PatientInfo { get; set; } = default!;    //患者情報
        public DateTime LatestPicDate { get; set; }                 //最新撮影日
        public double LatestRAxial { get; set; }                    //最新右眼軸長
        public double LatestLAxial { get; set; }                    //最新左眼軸長
        public string PatientComment { get; set; } = default!;      //患者コメント
        public string AllTreatName { get; set; } = default!;        //治療名称一覧
    }

    //眼軸長(データ表示/書込に使用するもの)
    public class AxialList {
        public string PatientID { get; set; } = default!;   //患者ID
        public string RExamID { get; set; } = default!;     //右測定データID
        public string LExamID { get; set; } = default!;     //左測定データID
        public double RAxial { get; set; }                  //右眼軸長
        public double LAxial { get; set; }                  //左眼軸長
        public DateTime? ExamDateTime { get; set; }         //測定日
        public bool IsRManualInput { get; set; }            //右眼手入力フラグ
        public bool IsLManualInput { get; set; }            //左眼手入力フラグ
    }

    // DBから取得する眼軸長データ
    public class AxialData {
        public string ID { get; set; } = default!;          //患者ID
        public double Axial { get; set; }                   //眼軸長
        public EyeType EyeId { get; set; }                  //左右眼情報
        public int DeviceID { get; set; }                   //測定装置ID
        public DateTime? ExamDateTime { get; set; }         //測定日時
    }

    // todo: 古い定義を使用しているため、修正が必要
    public enum EyeType {
        none,
        right,
        left,
        both,
    }

    //治療方法設定
    public class TreatmentMethodSetting {
        public int ID { get; set; }
        public string TreatName { get; set; } = default!;//治療方法の名前
        public RGBAColor ?RGBAColor { get; set; }//治療方法に割り当てられた色
        public int SuppresionRate { get; set; }//抑制率
    }

    public class RGBAColor {
        public int R { get; set; } = 0;//色のR値
        public int G { get; set; } = 0;//色のG値
        public int B { get; set; } = 0;//色のB値
        public int A { get; set; } = 0;//色のA値
    }

    public class TreatmentData {
        public int ID { get; set; } = 0;                     //治療ID
        public int TreatID { get; set; } = 0;      //治療方法ID
        public DateTime? StartDateTime { get; set; }         //治療開始日時
        public DateTime? EndDateTime { get; set; }           //治療終了日時
    }

}
