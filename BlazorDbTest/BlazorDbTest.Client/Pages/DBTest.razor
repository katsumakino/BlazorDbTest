@page "/dbtest"
@* HttpClient を受け取る *@
@inject HttpClient HttpClient
@using System.Text.Json;

@using System.Text.Encodings.Web;
@using System.Text.Unicode;

<PageTitle>DB Test</PageTitle>

<h1>Hi!</h1>

<h3>INPUT</h3>
<EditForm EditContext="editContextPatientInfo" FormName="patientinfoform"/>

<br />
<h4>○ 患者ID</h4>
<div class="part-group">
    <label>ID:</label>
    <InputText @bind-Value="PatientInfoModel.ID" autocomplete=off />
</div>

<br />
<h4>○ 患者情報</h4>
<div class="part-group">
    <label>Family Name:</label>
    <InputText @bind-Value="PatientInfoModel.FamilyName" autocomplete=off />
</div>
<div class="part-group">
    <label>First Name:</label>
    <InputText @bind-Value="PatientInfoModel.FirstName" autocomplete=off />
</div>
<div>
    <label>Gender:</label>
    <InputRadioGroup @bind-Value="PatientInfoModel.Gender">
        <InputRadio Value="Gender.male" />Man
        <InputRadio Value="Gender.female" />Female
        <InputRadio Value="Gender.other" />NoSpecified
    </InputRadioGroup>
</div>
<div>
    <label>Birthday:</label>
    <InputDate @bind-Value="PatientInfoModel.BirthDate" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div class="part-group">
    <label>Mark:</label>
    <InputCheckbox @bind-Value="PatientInfoModel.Mark" />
</div>
<div class="part-group">
    <label>Same ID:</label>
    <InputText @bind-Value="PatientInfoModel.SameID" autocomplete=off />
</div>
<div class="part-group">
  <label>UUID:</label>
  <InputText @bind-Value="PatientInfoModel.UUID" autocomplete=off />
</div>
<div>
  <button @onclick="PatientInfoButtonClick">Register</button>
  <button @onclick="UpdatePatientListButtonClick">Update</button>
  <button @onclick="UpdatePatientFlagButtonClick">Flag Set</button>
</div>

@if (patientList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Gender</th>
                <th>Age</th>
                <th>BirthDay</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var patientinfo in patientList) {
                <tr>
                    <td>@patientinfo.ID</td>
                    <td>@patientinfo.FamilyName</td>
                    <td>@patientinfo.FirstName</td>
                    <td>@patientinfo.Gender</td>
                    <td>@patientinfo.Age</td>
                    <td>@patientinfo.BirthDate</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<EditForm EditContext="editContextAxial" FormName="axialform" />
<h4>○ 眼軸長測定値</h4>
<div class="part-group">
    <label>Axial(R):</label>
    <input type="number" @bind-value=AxialModel.RAxial />
</div>
<div class="part-group">
    <label>Axial(L):</label>
    <input type="number" @bind-value=AxialModel.LAxial />
</div>
<div>
    <label>Exam Date:</label>
    <InputDate @bind-Value="AxialModel.ExamDateTime" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div>
    <button @onclick="AxialButtonClick">Register</button>
    <button @onclick="UpdateAxialListButtonClick">Update</button>
</div>
@if (axialList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>ExamID(R)</th>
                <th>ExamID(L)</th>
                <th>ID</th>
                <th>R</th>
                <th>L</th>
                <th>Exam Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var axial in axialList) {
                <tr>
                    <td>@axial.RExamID</td>
                    <td>@axial.LExamID</td>
                    <td>@axial.PatientID</td>
                    <td>@axial.RAxial</td>
                    <td>@axial.LAxial</td>
                    <td>@axial.ExamDateTime</td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
  <label>ID(R):</label>
  <input type="number" @bind-value=AxialModel.RExamID />
  <label>ID(L):</label>
  <input type="number" @bind-value=AxialModel.LExamID />
  <button @onclick="DeleteAxialListButtonClick">Delete</button>
</div>
<div class="part-group">
  <label>Change ID:</label>
  <InputText @bind-Value="MoveId" autocomplete=off />
  <button @onclick="MoveAxialListButtonClick">Move</button>
</div>

<br />
<h4>○ 治療名称</h4>
<div class="part-group">
    <label>Treat ID:</label>
    <input type="number" @bind-value=TreatmentMethodModel.ID />
</div>
<div class="part-group">
    <label>Treat Name:</label>
    <InputText @bind-Value="TreatmentMethodModel.TreatName" autocomplete=off />
</div>
<br />

<h4>○ 治療方法登録</h4>
<div class="part-group">
    <label>RED:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.R />
</div>
<div class="part-group">
    <label>Green:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.G />
</div>
<div class="part-group">
    <label>Blue:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.B />
</div>
<div class="part-group">
    <label>Alpha:</label>
    <input type="number" @bind-value=TreatmentMethodModel.RGBAColor.A />
</div>
<div class="part-group">
    <label>Suppression Rate:</label>
    <input type="number" @bind-value=TreatmentMethodModel.SuppresionRate />
</div>
<div>
    <button @onclick="TreatmentMethodButtonClick">Register</button>
</div>

<br />
<div>
    <button @onclick="UpdateTreatmentMethodListButtonClick">Update</button>
</div>
@if (treatmentMethodList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Treatment ID</th>
                <th>Treatment Name</th>
                <th>Red</th>
                <th>Green</th>
                <th>Blue</th>
                <th>Alpha</th>
                <th>Suppression Rate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var treatMethod in treatmentMethodList) {
                <tr>
                    <td>@treatMethod.ID</td>
                    <td>@treatMethod.TreatName</td>
                    <td>@treatMethod.RGBAColor.R</td>
                    <td>@treatMethod.RGBAColor.G</td>
                    <td>@treatMethod.RGBAColor.B</td>
                    <td>@treatMethod.RGBAColor.A</td>
                    <td>@treatMethod.SuppresionRate</td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
  <label>ID:</label>
  <input type="number" @bind-value=TreatmentMethodModel.ID />
  <button @onclick="DeleteTreatmentMethodButtonClick">Delete</button>
</div>

<br />
<h4>○ 患者の治療状況登録</h4>
<div class="part-group">
  <label>ID:</label>
  <input type="number" @bind-value=TreatmentModel.ID />
</div>
<div>
    <label>Start Date:</label>
    <InputDate @bind-Value="TreatmentModel.StartDateTime" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div>
    <label>End Date:</label>
    <InputDate @bind-Value="TreatmentModel.EndDateTime" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div>
    <button @onclick="TreatmentButtonClick">Register</button>
</div>

<br />
<div>
    <button @onclick="UpdateTreatmentListButtonClick">Update</button>
</div>
@if (treatmentList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Treatment ID</th>
                <th>Treatment Type ID</th>
                <th>Start</th>
                <th>End</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var treatment in treatmentList) {
                <tr>
                    <td>@treatment.ID</td>
                    <td>@treatment.TreatID</td>
                    <td>@treatment.StartDateTime</td>
                    <td>@treatment.EndDateTime</td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
  <label>ID:</label>
  <input type="number" @bind-value=TreatmentModel.ID />
  <button @onclick="DeleteTreatmentButtonClick">Delete</button>
</div>

<br />
<h4>○ コメント登録</h4>
<div class="part-group">
    <label>Exam Date:</label>
    <InputDate @bind-Value="AxmCommentModel.ExamDateTime" max="@DateTime.Today.ToString("yyyy-MM-dd")" min="@MinDate" />
</div>
<div class="part-group">
    <label>Comment Type:</label>
    <InputRadioGroup @bind-Value="AxmCommentModel.CommentType">
        <InputRadio Value="AxmCommentType.none" />none
        <InputRadio Value="AxmCommentType.Patient" />Patient
        <InputRadio Value="AxmCommentType.ExamDate" />Exam Date
    </InputRadioGroup>
</div>
<div class="part-group">
    <label>Comment:</label>
    <InputTextArea @bind-Value="AxmCommentModel.Description" autocomplete=off />
</div>
<div>
    <button @onclick="AxmCommentButtonClick">Register</button>
</div>

<br />
<div>
    <button @onclick="UpdateAxmCommentListButtonClick">Update</button>
</div>
@if (axmCommentList == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Comment ID</th>
                <th>Comment Type ID</th>
                <th>Comment</th>
                <th>Exam Date Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var axmComment in axmCommentList) {
                <tr>
                    <td>@axmComment.ID</td>
                    <td>@axmComment.CommentType</td>
                    <td>@axmComment.Description</td>
                    <td>@axmComment.ExamDateTime</td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
  <label>ID(R):</label>
  <input type="number" @bind-value=AxmCommentModel.ID />
  <button @onclick="DeleteCommentListButtonClick">Delete</button>
</div>
<div class="part-group">
  <label>Change ID:</label>
  <InputText @bind-Value="MoveId" autocomplete=off />
  <button @onclick="MoveCommentListButtonClick">Move</button>
</div>

@code {

  private PatientInfo[]? patientList;
  private AxialList[]? axialList;
  private TreatmentData[]? treatmentList;
  private TreatmentMethodSetting[]? treatmentMethodList;
  private AxmComment[]? axmCommentList;
  private string MinDate = new DateTime(1990, 1, 1).ToString("yyyy-MM-dd");
  private string? messagetext;

  [SupplyParameterFromForm]
  private PatientInfo PatientInfoModel { get; set; } = default!;
  private AxialList AxialModel { get; set; } = default!;
  private TreatmentData TreatmentModel { get; set; } = default!;
  private TreatmentMethodSetting TreatmentMethodModel { get; set; } = default!;
  private AxmComment AxmCommentModel { get; set; } = default!;
  private EditContext editContextPatientInfo { get; set; } = default!;
  private EditContext editContextAxmPatientList { get; set; } = default!;
  private EditContext editContextAxial { get; set; } = default!;
  private EditContext editContextTreatmentMethod { get; set; } = default!;
  private EditContext editContextTreatment { get; set; } = default!;
  private EditContext editContextAxmComment { get; set; } = default!;
  private ValidationMessageStore ValidationMessageStore { get; set; } = default!;
  private string MoveId { get; set; } = default!;

  protected override async Task OnInitializedAsync() {
     
    PatientInfoModel ??= new();
    PatientInfoModel.Gender = Gender.other;
    PatientInfoModel.BirthDate = DateTime.Today;
    editContextPatientInfo = new(PatientInfoModel);

    AxialModel ??= new();
    AxialModel.ExamDateTime = DateTime.Today;
    editContextAxial = new(AxialModel);

    TreatmentMethodModel ??= new();
    TreatmentMethodModel.RGBAColor = new();
    editContextTreatmentMethod = new(TreatmentMethodModel);

    TreatmentModel ??= new();
    TreatmentModel.StartDateTime = DateTime.Today;
    TreatmentModel.EndDateTime = DateTime.Today;
    editContextTreatment = new(TreatmentModel);

    AxmCommentModel ??= new();
    AxmCommentModel.CommentType = AxmCommentType.none;
    AxmCommentModel.ExamDateTime = DateTime.Today;
    editContextAxmComment = new(AxmCommentModel);

    // API を呼び出してデータを取得
    patientList = await HttpClient.GetFromJsonAsync<PatientInfo[]>("api/DBPatientInfo/GetPatientInfoList");
  }

  void PatientInfoButtonClick() {
    // 患者情報をDBに書込み
    Task.Run(() => SetPatientInfoAsync());
  }

  void AxialButtonClick() {
    // 眼軸長測定値をDBに書込み
    Task.Run(() => SetAxialDataAsync());
  }

  void TreatmentMethodButtonClick() {
    // 治療方法データをDBに書込み
    Task.Run(() => SetTreatmentMethodAsync());
  }

  void TreatmentButtonClick() {
    // 治療状況データをDBに書込み
    Task.Run(() => SetTreatmentDataAsync());
  }

  void AxmCommentButtonClick() {
    // 治療状況リスト更新
    Task.Run(() => SetAxmCommentListAsync());
  }

  void UpdatePatientListButtonClick() {
    // 患者情報リスト更新
    Task.Run(() => GetPatientListAsync());
  }

  void UpdatePatientFlagButtonClick() {
    // 患者情報フラグ更新
    Task.Run(() => UpdatePatientFlagAsync());
  }

  void UpdateAxialListButtonClick() {
    // 眼軸長測定値リスト更新
    Task.Run(() => GetAxialListAsync());
  }

  void UpdateTreatmentMethodListButtonClick() {
    // 治療方法リスト更新
    Task.Run(() => GetTreatmentMethodListAsync());
  }

  void UpdateTreatmentListButtonClick() {
    // 治療状況リスト更新
    Task.Run(() => GetTreatmentDataListAsync());
  }

  void UpdateAxmCommentListButtonClick() {
    // 治療状況リスト更新
    Task.Run(() => GetAxmCommentListAsync());
  }

  void DeleteAxialListButtonClick() {
    // 眼軸長測定値リストから削除
    Task.Run(() => DeleteAxialListAsync());
  }

  void DeleteTreatmentButtonClick() {
    // 治療方法リストから削除
    Task.Run(() => DeleteTreatmentAsync());
  }

  void DeleteTreatmentMethodButtonClick() {
    // 治療状況リストから削除
    Task.Run(() => DeleteTreatmentMethodAsync());
  }

  void DeleteCommentListButtonClick() {
    // コメントリストから削除
    Task.Run(() => DeleteCommentListAsync());
  }

  void MoveAxialListButtonClick() {
    // 眼軸長測定値リストから被検者ID変更
    Task.Run(() => MoveAxialListAsync());
  }

  void MoveCommentListButtonClick() {
    // コメントリストから被検者ID変更
    Task.Run(() => MoveCommentListAsync());
  }

  private JsonSerializerOptions options = new JsonSerializerOptions {
      Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
    };

  /// <summary>
  /// DBへ患者情報を書込み
  /// </summary>
  /// <returns></returns>
  protected async Task SetPatientInfoAsync() {
    string url = $"api/DBPatientInfo/SetPatientInfo/";
    
    var conditions = JsonSerializer.Serialize(PatientInfoModel, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");

    var response = await HttpClient.PostAsync(url, content);

    patientList = await HttpClient.GetFromJsonAsync<PatientInfo[]>("api/DBPatientInfo/GetPatientInfoList");

    //画面を更新する
    StateHasChanged();
  }

  protected async Task GetPatientInfoAsync() {
    string content = $"api/DBPatientInfo/GetPatientInfo/";
    content += PatientInfoModel.UUID;
    PatientInfo info = await HttpClient.GetFromJsonAsync<PatientInfo>(content);

    //画面を更新する
    StateHasChanged();
  }

  /// <summary>
  /// DBから患者情報を取得
  /// </summary>
  /// <returns></returns>
  protected async Task GetPatientListAsync() {
    patientList = await HttpClient.GetFromJsonAsync<PatientInfo[]>("api/DBPatientInfo/GetPatientInfoList");

    //画面を更新する
    StateHasChanged();
  }

  /// <summary>
  /// DBの患者情報フラグを更新
  /// </summary>
  /// <returns></returns>
  protected async Task UpdatePatientFlagAsync() {
    string url = $"api/DBPatientInfo/UpdatePatientInfoFlag/";

    var conditions = JsonSerializer.Serialize(PatientInfoModel, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");
      
    var response = await HttpClient.PostAsync(url, content);
  }

  ////////////////////////////////////////////////////////////////////
  // todo: 患者リストを取得
  // ID,名前,性別,年齢: PATIENT_LIST
  // 最新測定日,最新眼軸長: EXAM_OPTAXIAL
  // - ソートして先頭に来るデータを取得(右左ごと)
  // - 右左の測定日が同じなら両方表示
  // フラグ,治療方法,コメント: AXM_TABLE
  ////////////////////////////////////////////////////////////////////
  protected async Task GetPatientDataListAsync() {
    // todo:

    //画面を更新する
    StateHasChanged();
  }

  /// <summary>
  /// DBへ眼軸長測定値を書込み
  /// </summary>
  /// <returns></returns>
  protected async Task SetAxialDataAsync() {
    AxialModel.PatientID = PatientInfoModel.ID;

    string url = $"api/DBAxialData/SetOptAxial/";

    var conditions = JsonSerializer.Serialize(AxialModel, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");

    var response = await HttpClient.PostAsync(url, content);
  }

  /// <summary>
  /// DBから眼軸長測定値を取得
  /// </summary>
  /// <returns></returns>
  protected async Task GetAxialListAsync() {
    string content = $"api/DBAxialData/GetOptAxialList/";
    content += PatientInfoModel.ID;

    axialList = await HttpClient.GetFromJsonAsync<AxialList[]>(content);

    //画面を更新する
    StateHasChanged();
  }

  /// <summary>
  /// DBから眼軸長測定値を削除
  /// </summary>
  /// <returns></returns>
  protected async Task DeleteAxialListAsync() {
    string url = $"api/DBAxialData/DeleteOptAxialData/";

    // 右眼
    var conditions = JsonSerializer.Serialize(AxialModel.RExamID, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");
    var response = await HttpClient.PostAsync(url, content);

    // 左眼
    conditions = JsonSerializer.Serialize(AxialModel.LExamID, options);
    content = new StringContent(conditions, Encoding.UTF8, "application/json");
    response = await HttpClient.PostAsync(url, content);
  }

  /// <summary>
  /// DBから眼軸長測定値を別の被検者IDに移動
  /// </summary>
  /// <returns></returns>
  protected async Task MoveAxialListAsync() {
    MoveExamData moveData = new MoveExamData {
				RExamID = AxialModel.RExamID,
        LExamID = AxialModel.LExamID,
        ChangePatientID = MoveId
		};

    string url = $"api/DBAxialData/MoveOptAxialData/";

    var conditions = JsonSerializer.Serialize(moveData, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");

    var response = await HttpClient.PostAsync(url, content);
  }

  /// <summary>
  /// DBへ治療方法を書込み
  /// </summary>
  /// <returns></returns>
  protected async Task SetTreatmentMethodAsync() {
    string url = $"api/DBTreatment/SetTreatmentMethod/";

    var conditions = JsonSerializer.Serialize(TreatmentMethodModel, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");

    var response = await HttpClient.PostAsync(url, content);
  }

  /// <summary>
  /// DBから治療方法を取得
  /// </summary>
  /// <returns></returns>
  protected async Task GetTreatmentMethodListAsync() {
    string content = $"api/DBTreatment/GetTreatmentMethodList";
    treatmentMethodList = await HttpClient.GetFromJsonAsync<TreatmentMethodSetting[]>(content);

    //画面を更新する
    StateHasChanged();
  }

  /// <summary>
  /// DBから治療方法を削除
  /// </summary>
  /// <returns></returns>
  protected async Task DeleteTreatmentMethodAsync() {
    string content = $"api/DBTreatment/DeleteTreatmentInfoData/";

    await HttpClient.GetAsync(content + TreatmentMethodModel.ID);
  }

  /// <summary>
  /// DBへ治療状況を書込み
  /// </summary>
  /// <returns></returns>
  protected async Task SetTreatmentDataAsync() {
    string url = $"api/DBTreatment/SetTreatment/";

    TreatmentModel.TreatID = TreatmentMethodModel.ID;

    TreatmentDataRequest treatmentRequestModel = new TreatmentDataRequest {
        PatientID = PatientInfoModel.ID,
        TreatmentData = TreatmentModel
      };

    var conditions = JsonSerializer.Serialize(treatmentRequestModel, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");

    var response = await HttpClient.PostAsync(url, content);
  }

  /// <summary>
  /// DBから治療状況を取得
  /// </summary>
  /// <returns></returns>
  protected async Task GetTreatmentDataListAsync() {
    string content = $"api/DBTreatment/GetTreatmentList/";
    content += PatientInfoModel.ID;

    treatmentList = await HttpClient.GetFromJsonAsync<TreatmentData[]>(content);

    //画面を更新する
    StateHasChanged();
  }

  /// <summary>
  /// DBから治療状況を削除
  /// </summary>
  /// <returns></returns>
  protected async Task DeleteTreatmentAsync() {
    string content = $"api/DBTreatment/DeleteTreatmentData/";

    await HttpClient.GetAsync(content + TreatmentModel.ID);
  }

  /// <summary>
  /// DBへコメントを登録
  /// </summary>
  /// <returns></returns>
  protected async Task SetAxmCommentListAsync() {
    string url = $"api/DBAxmComment/SetAxmComment/";
    
    AxmCommentRequest commentRequestModel = new AxmCommentRequest {
			PatientID = PatientInfoModel.ID,
      AxmComment = AxmCommentModel
		};

    var conditions = JsonSerializer.Serialize(commentRequestModel, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");

    var response = await HttpClient.PostAsync(url, content);
  }

  /// <summary>
  /// DBからコメントを取得
  /// </summary>
  /// <returns></returns>
  protected async Task GetAxmCommentListAsync() {
    string content = $"api/DBAxmComment/GetDBAxmCommentList/";
    content += PatientInfoModel.ID;

    axmCommentList = await HttpClient.GetFromJsonAsync<AxmComment[]>(content);

    //画面を更新する
    StateHasChanged();
  }

  /// <summary>
  /// DBからコメントを削除
  /// </summary>
  /// <returns></returns>
  protected async Task DeleteCommentListAsync() {
    string url = $"api/DBAxmComment/DeleteAxmCommentData/";

    var conditions = JsonSerializer.Serialize(AxmCommentModel.ID, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");
    var response = await HttpClient.PostAsync(url, content);
  }

  /// <summary>
  /// DBからコメントを移動
  /// </summary>
  /// <returns></returns>
  protected async Task MoveCommentListAsync() {
    MoveCommentData moveData = new MoveCommentData {
        CommentID = AxmCommentModel.ID.ToString(),
        ChangePatientID = MoveId
    };

    string url = $"api/DBAxmComment/MoveAxmCommentData/";

    var conditions = JsonSerializer.Serialize(moveData, options);
    var content = new StringContent(conditions, Encoding.UTF8, "application/json");
    var response = await HttpClient.PostAsync(url, content);
  }

  // 測定日時の日付部分のみ取得
  private DateTime _DateTimeToDate(DateTime? input) {
    if (input == null) {
      return DateTime.MinValue;
    }
    return (DateTime)input.Value.Date;
  }
}
