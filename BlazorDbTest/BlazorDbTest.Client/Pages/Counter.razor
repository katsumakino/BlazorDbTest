@page "/counter"
@inject HttpClient HttpClient
@inject IJSRuntime JS
@using System.Text.Json;
@using System.Runtime.CompilerServices;
@using BlazorDbTest.Common;
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<input @oninput="HandleInput" @bind="Barcode" style="position: absolute; left: -9999px;" />

<button @onclick="CheckBarcode">
  バーコードテスト
</button>

<button @onclick="CheckDbConnection">
  DB接続テスト
</button>
<p>State: @IsConnection</p>

<h4>○ 変更後ID</h4>
<div class="part-group">
  <label>ID:</label>
  <InputText @bind-Value="patientId" autocomplete=off oninput="filterForbiddenWords(this)" />
  <button @onclick="CheckDuplication" >ID重複確認</button>
  <p>PtId: @IsDuplication</p>
</div>

@code {
  private int currentCount = 0;
  private LogInfo logInfo = new LogInfo();
  private string patientId = string.Empty;

  private void IncrementCount()
  {
    currentCount++;

    Task.Run(() => WriteLogAsync());
  }

  private JsonSerializerOptions options = new JsonSerializerOptions {
      Encoder = System.Text.Encodings.Web.JavaScriptEncoder.Create(System.Text.Unicode.UnicodeRanges.All)
    };

  protected async Task WriteLogAsync() {
    logInfo.Message = "Clicked: " + currentCount;
    logInfo.Type = "EVENT";
    logInfo.ErrLevel = "I";

    string url = $"api/Log/WriteLog/";

    // if(logInfo.ErrLevel == "W") {
    //   logInfo.Screenshot = await LogCommon.GetScreenshotUrl(JS);
    // } else {
    //   logInfo.Screenshot = string.Empty;
    // }    

    // logInfo.SourcePosition = LogCommon.GetCallerFIlePath();

    var conditions = JsonSerializer.Serialize(logInfo, options);
    var content = new StringContent(conditions, System.Text.Encoding.UTF8, "application/json");

    try {
      var response = await HttpClient.PostAsync(url, content);
      response.EnsureSuccessStatusCode(); // ステータスコードが成功かどうかを確認
    } catch (HttpRequestException ex) {
      Console.Error.WriteLine($"Request error: {ex.Message}");
    } catch (InvalidOperationException ex) {
      Console.Error.WriteLine($"Invalid operation: {ex.Message}");
    }
  }

  private string? Barcode { get; set; }
  private string? IsConnection { get; set; } = "aaaa";
  private string? IsDuplication { get; set; } = "---";

  private void HandleInput(ChangeEventArgs e) {
    Barcode = e.Value?.ToString();
    // バーコード入力が完了したときの処理をここに記述
    ProcessBarcode(Barcode);
  }

  private void ProcessBarcode(string? barcode) {
    // バーコード処理のロジックをここに記述
    Console.WriteLine($"バーコードが入力されました: {barcode}");

    // todo: 設定に合わせて、文字数切り出し
    string originalString = "Hello, World!";
    int startIndex = 7; // 開始位置（0から始まるインデックス）
    int length = 5; // 取得する文字数

    string substring = originalString.Substring(startIndex, length);
    Console.WriteLine(substring); // 出力: World

    // todo: 被検者ID検索、画面更新
  }

  private async Task CheckBarcode() {
    ProcessBarcode("test");
  }

  private async Task CheckDbConnection() {
    try {
      var response = await HttpClient.GetAsync("api/DBCommon/CheckConnection");
      if (response.IsSuccessStatusCode) {
        IsConnection = await response.Content.ReadAsStringAsync();
      } else {
        IsConnection = "Connection failed";
      }
    } catch (Exception ex) {
      IsConnection = $"Error: {ex.Message}";
    }
  }

  private async Task CheckDuplication() {
    try {
      var response = await HttpClient.GetAsync("api/DBPatientInfo/CheckPatientId/" + patientId);
      if (response.IsSuccessStatusCode) {
        IsDuplication = "OK";
      } else {
        IsDuplication = "NG";
      }
    } catch (Exception ex) {
      IsDuplication = $"Error: {ex.Message}";
    }
  }

  public class LogInfo {
    public string Type { get; set; } = default!;            // [種別]
    public string Message { get; set; } = default!;         // [メッセージ]
    public string ErrLevel { get; set; } = default!;        // [エラーレベル]
    public string SourcePosition { get; set; } = default!;  // [ソース位置]
    public string SubMessage { get; set; } = default!;      // [備考]
    public string IPAddress { get; set; } = default!;       // [IPアドレス]
    public string Screenshot { get; set; } = default!;      // [スクリーンショット]
  }
}
